// vite.config.js
import vue from "file:///Users/justinkimbrell/Code/vue-interface/node_modules/.pnpm/@vitejs+plugin-vue@4.0.0_vite@4.1.1+vue@3.2.47/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import { pascalCase } from "file:///Users/justinkimbrell/Code/vue-interface/node_modules/.pnpm/change-case@4.1.2/node_modules/change-case/dist/index.js";
import path from "path";
import { defineConfig } from "file:///Users/justinkimbrell/Code/vue-interface/node_modules/.pnpm/vite@4.1.1/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/justinkimbrell/Code/vue-interface/node_modules/.pnpm/vite-plugin-dts@1.7.2_vite@4.1.1/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var name = "@vue-interface/radio-field";

// vite.config.js
var __vite_injected_original_dirname = "/Users/justinkimbrell/Code/vue-interface/packages/radio-field";
var fileName = name.split("/")[1];
var vite_config_default = defineConfig({
  build: {
    sourcemap: true,
    lib: {
      entry: path.resolve(__vite_injected_original_dirname, "index.ts"),
      name: pascalCase(fileName),
      fileName
    },
    rollupOptions: {
      external: ["vue"],
      output: {
        globals: {
          vue: "Vue"
        }
      }
    },
    watch: !process.env.NODE_ENV && {
      include: [
        "./tailwindcss/**/*.js"
      ]
    }
  },
  plugins: [
    vue(),
    dts()
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2p1c3RpbmtpbWJyZWxsL0NvZGUvdnVlLWludGVyZmFjZS9wYWNrYWdlcy9yYWRpby1maWVsZFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2p1c3RpbmtpbWJyZWxsL0NvZGUvdnVlLWludGVyZmFjZS9wYWNrYWdlcy9yYWRpby1maWVsZC92aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvanVzdGlua2ltYnJlbGwvQ29kZS92dWUtaW50ZXJmYWNlL3BhY2thZ2VzL3JhZGlvLWZpZWxkL3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnO1xuaW1wb3J0IHsgcGFzY2FsQ2FzZSB9IGZyb20gXCJjaGFuZ2UtY2FzZVwiO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcbmltcG9ydCBkdHMgZnJvbSAndml0ZS1wbHVnaW4tZHRzJztcbmltcG9ydCB7IG5hbWUgfSBmcm9tICcuL3BhY2thZ2UuanNvbic7XG5cbmNvbnN0IGZpbGVOYW1lID0gbmFtZS5zcGxpdCgnLycpWzFdO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICAgIGJ1aWxkOiB7XG4gICAgICAgIHNvdXJjZW1hcDogdHJ1ZSxcbiAgICAgICAgbGliOiB7XG4gICAgICAgICAgICBlbnRyeTogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2luZGV4LnRzJyksXG4gICAgICAgICAgICBuYW1lOiBwYXNjYWxDYXNlKGZpbGVOYW1lKSxcbiAgICAgICAgICAgIGZpbGVOYW1lLFxuICAgICAgICB9LFxuICAgICAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICAgICAgICBleHRlcm5hbDogWyd2dWUnXSxcbiAgICAgICAgICAgIG91dHB1dDoge1xuICAgICAgICAgICAgICAgIGdsb2JhbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgdnVlOiAnVnVlJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdhdGNoOiAhcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYge1xuICAgICAgICAgICAgaW5jbHVkZTogW1xuICAgICAgICAgICAgICAgICcuL3RhaWx3aW5kY3NzLyoqLyouanMnXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHBsdWdpbnM6IFtcbiAgICAgICAgdnVlKCksXG4gICAgICAgIGR0cygpLFxuICAgIF0sXG59KTtcbiIsICJ7XG4gIFwibmFtZVwiOiBcIkB2dWUtaW50ZXJmYWNlL3JhZGlvLWZpZWxkXCIsXG4gIFwidmVyc2lvblwiOiBcIjEuMC4xXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBIFZ1ZSByYWRpbyBmaWVsZCBjb21wb25lbnQuXCIsXG4gIFwiZmlsZXNcIjogW1xuICAgIFwiZGlzdFwiXG4gIF0sXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcIm1haW5cIjogXCIuL2Rpc3QvcmFkaW8tZmllbGQudW1kLmNqc1wiLFxuICBcIm1vZHVsZVwiOiBcIi4vZGlzdC9yYWRpby1maWVsZC5qc1wiLFxuICBcInN0eWxlXCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiLFxuICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcbiAgXCJleHBvcnRzXCI6IHtcbiAgICBcIi5cIjoge1xuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvcmFkaW8tZmllbGQuanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9yYWRpby1maWVsZC51bWQuanNcIixcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiXG4gICAgfSxcbiAgICBcIi4vZGlzdC9zdHlsZS5jc3NcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCJcbiAgfSxcbiAgXCJicm93c2Vyc2xpc3RcIjogXCJsYXN0IDIgdmVyc2lvbnMsID4gMC41JSwgaWUgPj0gMTFcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIFwicHJlLXJlbGVhc2VcIjogXCJucG0gcnVuIGJ1aWxkOyBnaXQgYWRkIC4gLUE7IGdpdCBjb21taXQgLW0gJ3ByZS1yZWxlYXNlIGNvbW1pdCdcIixcbiAgICBcInJlbGVhc2UtcGF0Y2hcIjogXCJucG0gcnVuIHByZS1yZWxlYXNlICYmIG5wbSB2ZXJzaW9uIHBhdGNoIC1tIFxcXCIlc1xcXCIgJiYgbnBtIHJ1biByZWxlYXNlO1wiLFxuICAgIFwicmVsZWFzZS1taW5vclwiOiBcIm5wbSBydW4gcHJlLXJlbGVhc2UgJiYgbnBtIHZlcnNpb24gbWlub3IgLW0gXFxcIiVzXFxcIiAmJiBucG0gcnVuIHJlbGVhc2U7XCIsXG4gICAgXCJyZWxlYXNlLW1ham9yXCI6IFwibnBtIHJ1biBwcmUtcmVsZWFzZSAmJiBucG0gdmVyc2lvbiBtYWpvciAtbSBcXFwiJXNcXFwiICYmIG5wbSBydW4gcmVsZWFzZTtcIixcbiAgICBcInJlbGVhc2VcIjogXCJnaXQgYWRkIC4gLUE7IGdpdCBjb21taXQ7IGdpdCBwdXNoIC0tdGFncyBvcmlnaW47IG5wbSBwdWJsaXNoO1wiXG4gIH0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXQraHR0cHM6Ly9naXRodWIuY29tL3Z1ZS1pbnRlcmZhY2UvcmFkaW8tZmllbGQuZ2l0XCJcbiAgfSxcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJSYWRpb1wiLFxuICAgIFwiRmllbGRcIixcbiAgICBcIlZ1ZVwiLFxuICAgIFwiQ29tcG9uZW50XCIsXG4gICAgXCJUYWlsd2luZFwiLFxuICAgIFwiQm9vdHN0cmFwXCJcbiAgXSxcbiAgXCJhdXRob3JcIjogXCJKdXN0aW4gS2ltYnJlbGxcIixcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCIsXG4gIFwiYnVnc1wiOiB7XG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdnVlLWludGVyZmFjZS9yYWRpby1maWVsZC9pc3N1ZXNcIlxuICB9LFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3Z1ZS1pbnRlcmZhY2UvcmFkaW8tZmllbGQvZG9jc1wiLFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdnVlLWludGVyZmFjZS9mb3JtLWNvbnRyb2xcIjogXCJeMS4wLjAtYmV0YS4xMFwiXG4gIH0sXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJ2dWVcIjogXCJeMy4wLjBcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdml0ZWpzL3BsdWdpbi12dWVcIjogXCJeNC4wLjBcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjJcIixcbiAgICBcImNoYW5nZS1jYXNlXCI6IFwiXjQuMS4yXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOC4yOC4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXZ1ZVwiOiBcIl45LjguMFwiLFxuICAgIFwicGFzY2FsY2FzZVwiOiBcIl4yLjAuMFwiLFxuICAgIFwicG9zdGNzc1wiOiBcIl44LjQuNlwiLFxuICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy4wLjE4XCIsXG4gICAgXCJ2aXRlXCI6IFwiXjQuMC40XCIsXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMS43LjFcIixcbiAgICBcInZ1ZVwiOiBcIl4zLjIuMzdcIlxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXlXLE9BQU8sU0FBUztBQUN6WCxTQUFTLGtCQUFrQjtBQUMzQixPQUFPLFVBQVU7QUFDakIsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxTQUFTOzs7QUNIZCxXQUFROzs7QUREVixJQUFNLG1DQUFtQztBQU96QyxJQUFNLFdBQVcsS0FBSyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBRWxDLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQ3hCLE9BQU87QUFBQSxJQUNILFdBQVc7QUFBQSxJQUNYLEtBQUs7QUFBQSxNQUNELE9BQU8sS0FBSyxRQUFRLGtDQUFXLFVBQVU7QUFBQSxNQUN6QyxNQUFNLFdBQVcsUUFBUTtBQUFBLE1BQ3pCO0FBQUEsSUFDSjtBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ1gsVUFBVSxDQUFDLEtBQUs7QUFBQSxNQUNoQixRQUFRO0FBQUEsUUFDSixTQUFTO0FBQUEsVUFDTCxLQUFLO0FBQUEsUUFDVDtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsSUFDQSxPQUFPLENBQUMsUUFBUSxJQUFJLFlBQVk7QUFBQSxNQUM1QixTQUFTO0FBQUEsUUFDTDtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ0wsSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLEVBQ1I7QUFDSixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
